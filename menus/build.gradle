plugins {
    id 'java-library'
    id 'maven-publish'
}


group = 'net.staticstudios'
version = '1.0.11-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

tasks.publish {
    dependsOn(build)
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    repositories {
        maven {
            credentials(org.gradle.api.credentials.PasswordCredentials.class)
            name = "StaticStudios"
            var base = "https://repo.staticstudios.net"
            var releasesRepoUrl = "$base/releases/"
            var snapshotsRepoUrl = "$base/snapshots/"
            setUrl((version.toString().endsWith("SNAPSHOT")) ? snapshotsRepoUrl : releasesRepoUrl)
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = 'Static Menus'
                description = 'A simple menu library for managing GUIs in Paper plugins.'
                url = 'https://github.com/StaticStudios/static-menus'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'staticstudios'
                        name = 'Static Studios'
                        email = 'support@staticstudios.net'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/StaticStudios/static-menus.git'
                    developerConnection = 'scm:git:ssh://github.com:StaticStudios/static-menus.git'
                    url = 'https://github.com/StaticStudios/static-menus'
                }
            }
        }
    }
}


dependencies {
    compileOnly "io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}